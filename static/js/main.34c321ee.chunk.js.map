{"version":3,"sources":["hooks/context.js","App.js","serviceWorker.js","index.js"],"names":["initialState","convert","x","MainContext","createContext","exprs","Example","id","useContext","useState","value","setValue","onChange","useCallback","event","v","target","console","log","c","className","Examples","map","index","Header","class","Boolean","window","location","hostname","match","ReactDOM","render","data","setData","useEffect","a","w","err","toString","error","message","fetch","useValue","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"0OAEMA,EAAe,CACjBC,QAAS,SAACC,GAAD,MAAO,KAGPC,EAAcC,wBAAcJ,GA6BlC,IChCDK,EAAQ,CACZ,CAAC,cAAe,mCAAoC,UACpD,CAAC,qBAAsB,8EAA+E,qBACtG,CAAC,oBAAqB,iEAAkE,6BACxF,CAAC,WAAY,uDAAb,yCAIA,CAAC,kBAAmB,sDAApB,8CAKA,CAAC,WAAY,oEAAb,+BAGF,SAASC,EAAT,GAA0B,IAAPC,EAAM,EAANA,GACTN,EDe0BO,qBAAWL,GCfrCF,QADe,EAEGQ,mBAASJ,EAAME,GAAI,IAFtB,mBAEhBG,EAFgB,KAETC,EAFS,KAIjBC,EAAWC,uBAAY,SAACC,GAC5B,IAAMC,EAAID,EAAME,OAAON,MACvBO,QAAQC,IAAI,CAAEH,IAAGI,EAAGlB,EAAQc,KAC5BJ,EAASI,KACR,CAACJ,EAAUV,IAEd,OACE,iCACE,yBAAKmB,UAAU,qBACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,iBAAiBb,EAAK,KAAOF,EAAME,GAAI,GACnD,0BAAMa,UAAU,IAAIf,EAAME,GAAI,MAIlC,yBAAKa,UAAU,kBACb,8BAAUA,UAAU,iBAAiBR,SAAUA,EAAUF,MAAOA,IAChE,yBAAKU,UAAU,aACb,yBAAKA,UAAU,uBAAuBnB,EAAQS,QAQ1D,SAASW,IACP,OACE,6BAEIhB,EAAMiB,KAAI,SAACZ,EAAOa,GAAR,OAAmB,kBAACjB,EAAD,CAASC,GAAIgB,QAMlD,SAASC,IACP,OACE,yBAAKC,MAAM,QACT,sCACA,qFCnDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBF+DD,WACb,IAAMtB,ED9DD,WAAqB,IAAD,EACCD,mBAAST,GADV,mBAChBiC,EADgB,KACVC,EADU,KAwBvB,OArBAC,qBAAU,WAAM,4CACZ,8BAAAC,EAAA,+EAEwB,6BAFxB,OAEcC,EAFd,OAGcpC,EAAU,SAACC,GACb,IACI,OAAOmC,EAAEpC,QAAQC,GAErB,MAAOoC,GAEH,OADArB,QAAQC,IAAIoB,GACLA,EAAIC,aAGnBL,GAAQ,SAAAD,GAAI,sBAAUA,EAAV,CAAgBhC,eAZpC,gDAcQgB,QAAQuB,MAAR,kDAAyD,KAAIC,QAA7D,MAdR,0DADY,uBAAC,WAAD,wBAkBZC,KACD,IAEIT,ECsCKU,GAEd,OACE,kBAACxC,EAAYyC,SAAb,CAAsBlC,MAAOA,GAC3B,6BACE,kBAACc,EAAD,MACA,kBAACH,EAAD,UEtEQ,MAASwB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAb,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.34c321ee.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react'\n\nconst initialState = {\n    convert: (x) => \"\",\n}\n\nexport const MainContext = createContext(initialState)\n\nexport function useValue() {\n    const [data, setData] = useState(initialState);\n\n    useEffect(() => {\n        async function fetch() {\n            try {\n                const w = await import(\"pipers\");\n                const convert = (x) => {\n                    try {\n                        return w.convert(x)\n                    }\n                    catch (err) {\n                        console.log(err)\n                        return err.toString()\n                    }\n                }\n                setData(data => ({ ...data, convert }))\n            } catch (err) {\n                console.error(`Unexpected error in loadWasm. [Message: ${err.message}]`);\n            }\n        }\n        fetch()\n    }, []);\n\n    return data\n}\n\nexport const useMainContext = () => useContext(MainContext)","import React, { Component, useState, useCallback, useEffect } from \"react\";\nimport { MainContext, useValue, useMainContext } from './hooks/context'\n\nconst exprs = [\n  [\"simple pipe\", \"pipes will turn into parentheses\", \"42 | f\"],\n  [\"input as first arg\", \"for functions with multiple args, the input will be passed as the first one\", \"42 | f | g(3) | h\"],\n  [\"input as last arg\", \"if you want to determine the arg position, use the x -> syntax\", \"42 | f | x -> g(3, x) | h\"],\n  [\"newlines\", \"you can use indented newlines to improve readability\", `42 \n  | f \n  | x -> g(3, x) \n  | h`],\n  [\"named variables\", \"you can split a expression into multiple named ones\", `x = 42 | f\n\ny = 53 | g(3)\n\nx + y | sum`],\n  [\"escaping\", \"if you need to use a | inside your expressions, escape it with \\\\\", `53 | x -> g(x \\\\|\\\\| true)`],\n]\n\nfunction Example({ id }) {\n  const { convert } = useMainContext()\n  const [value, setValue] = useState(exprs[id][2])\n\n  const onChange = useCallback((event) => {\n    const v = event.target.value;\n    console.log({ v, c: convert(v) })\n    setValue(v)\n  }, [setValue, convert])\n\n  return (\n    <section>\n      <div className=\"section-container\">\n        <div className=\"meta-area\">\n          <h2 className=\"section-title\">{id + \". \" + exprs[id][0]}\n            <code className=\"\">{exprs[id][1]}</code>\n          </h2>\n        </div>\n\n        <div className=\"ex-section ex1\">\n          <textarea className=\"code-container\" onChange={onChange} value={value} />\n          <div className=\"code-area\">\n            <div className=\"code-container html\">{convert(value)}</div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nfunction Examples() {\n  return (\n    <div>\n      {\n        exprs.map((value, index) => (<Example id={index} />))\n      }\n    </div>\n  )\n}\n\nfunction Header() {\n  return (\n    <div class=\"meta\">\n      <h1>Pipers</h1>\n      <p>\n        Use pipe expressions in your PromQL queries and more!\n      </p>\n    </div>\n  )\n}\nexport default function App() {\n  const value = useValue()\n\n  return (\n    <MainContext.Provider value={value}>\n      <div>\n        <Header />\n        <Examples />\n      </div>\n    </MainContext.Provider >\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}